// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFileFieldNames          = builder.RawFieldNames(&UserFile{})
	userFileRows                = strings.Join(userFileFieldNames, ",")
	userFileRowsExpectAutoSet   = strings.Join(stringx.Remove(userFileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userFileRowsWithPlaceHolder = strings.Join(stringx.Remove(userFileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userFileModel interface {
		Insert(ctx context.Context, data *UserFile) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserFile, error)
		Update(ctx context.Context, data *UserFile) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserFileModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserFile struct {
		Id       int64     `db:"id"`
		CreateAt time.Time `db:"create_at"`
		UpdateAt time.Time `db:"update_at"`
		DeleteAt time.Time `db:"delete_at"`
		UserId   int64     `db:"user_id"`
		FileId   int64     `db:"file_id"`
		DirId    int64     `db:"dir_id"`
		Name     string    `db:"name"`
	}
)

func newUserFileModel(conn sqlx.SqlConn) *defaultUserFileModel {
	return &defaultUserFileModel{
		conn:  conn,
		table: "`user_file`",
	}
}

func (m *defaultUserFileModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserFileModel) FindOne(ctx context.Context, id int64) (*UserFile, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userFileRows, m.table)
	var resp UserFile
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserFileModel) Insert(ctx context.Context, data *UserFile) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userFileRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteAt, data.UserId, data.FileId, data.DirId, data.Name)
	return ret, err
}

func (m *defaultUserFileModel) Update(ctx context.Context, data *UserFile) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userFileRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeleteAt, data.UserId, data.FileId, data.DirId, data.Name, data.Id)
	return err
}

func (m *defaultUserFileModel) tableName() string {
	return m.table
}
