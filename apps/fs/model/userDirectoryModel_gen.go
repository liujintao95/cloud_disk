// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userDirectoryFieldNames          = builder.RawFieldNames(&UserDirectory{})
	userDirectoryRows                = strings.Join(userDirectoryFieldNames, ",")
	userDirectoryRowsExpectAutoSet   = strings.Join(stringx.Remove(userDirectoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userDirectoryRowsWithPlaceHolder = strings.Join(stringx.Remove(userDirectoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userDirectoryModel interface {
		Insert(ctx context.Context, data *UserDirectory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserDirectory, error)
		Update(ctx context.Context, data *UserDirectory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserDirectoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserDirectory struct {
		Id       int64     `db:"id"`
		CreateAt time.Time `db:"create_at"`
		UpdateAt time.Time `db:"update_at"`
		DeleteAt time.Time `db:"delete_at"`
		UserId   int64     `db:"user_id"`
		ParentId int64     `db:"parent_id"`
		Name     string    `db:"name"`
	}
)

func newUserDirectoryModel(conn sqlx.SqlConn) *defaultUserDirectoryModel {
	return &defaultUserDirectoryModel{
		conn:  conn,
		table: "`user_directory`",
	}
}

func (m *defaultUserDirectoryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserDirectoryModel) FindOne(ctx context.Context, id int64) (*UserDirectory, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userDirectoryRows, m.table)
	var resp UserDirectory
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserDirectoryModel) Insert(ctx context.Context, data *UserDirectory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, userDirectoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteAt, data.UserId, data.ParentId, data.Name)
	return ret, err
}

func (m *defaultUserDirectoryModel) Update(ctx context.Context, data *UserDirectory) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userDirectoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeleteAt, data.UserId, data.ParentId, data.Name, data.Id)
	return err
}

func (m *defaultUserDirectoryModel) tableName() string {
	return m.table
}
